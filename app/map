package com.teamyar.presentation.chatFr.chatDetailFr.chatMap

import android.annotation.SuppressLint
import android.os.Bundle
import android.os.Looper
import android.preference.PreferenceManager
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.databinding.DataBindingUtil
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.Granularity
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import com.teamyar.R
import com.teamyar.databinding.FragmentMapBinding
import com.teamyar.presentation.base.BaseFr
import org.osmdroid.config.Configuration
import org.osmdroid.events.MapEventsReceiver
import org.osmdroid.tileprovider.tilesource.TileSourceFactory
import org.osmdroid.util.GeoPoint
import org.osmdroid.views.MapView
import org.osmdroid.views.overlay.MapEventsOverlay
import org.osmdroid.views.overlay.Marker

class ChatMapFragment : BaseFr(), MapEventsReceiver {
    private lateinit var binding: FragmentMapBinding
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var mapView: MapView
    private var marker: Marker? = null
    private lateinit var mapEventsOverlay: MapEventsOverlay
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
    }

    @SuppressLint("MissingPermission")
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_map, container, false)
        Configuration.getInstance().load(context, PreferenceManager.getDefaultSharedPreferences(context))
        mapView = binding.mapview
        marker = Marker(mapView)
        mapView.apply {
            setTileSource(TileSourceFactory.MAPNIK)
            setMultiTouchControls(true)
            mapEventsOverlay = MapEventsOverlay(this@ChatMapFragment)
            overlays.add(0, mapEventsOverlay)
        }
        getCurrentLocation()
        fusedLocationClient.requestLocationUpdates(
            LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY, 1000).apply {
                setMinUpdateDistanceMeters(1F)
                setGranularity(Granularity.GRANULARITY_PERMISSION_LEVEL)
                setWaitForAccurateLocation(true)
            }.build(),
            object : LocationCallback() {
                override fun onLocationResult(locationResult: LocationResult) {
                    locationResult.locations[0]?.let { location ->
                        binding.mapview.setTileSource(TileSourceFactory.DEFAULT_TILE_SOURCE)
                        binding.mapview.setBuiltInZoomControls(false)
                        binding.mapview.setMultiTouchControls(true)
                        mapView.controller.setZoom(17.5)
                        mapView.controller.setCenter(GeoPoint(location.latitude, location.longitude))
//                        marker.position = GeoPoint(location.latitude, location.longitude)
                        Log.e("TAG", "longPressHelper: ${location.latitude} ${location.longitude}")
                    }
                }
            },
            Looper.getMainLooper()
        )
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.btnCurrentLocation.setOnClickListener {
            getCurrentLocation()
        }
    }

    override fun onResume() {
        super.onResume()
        mapView.onResume()
    }

    @SuppressLint("MissingPermission")
    private fun getCurrentLocation() {
        fusedLocationClient.lastLocation.addOnSuccessListener { location ->
            mapView.controller.apply {
                setZoom(17.5)
                setCenter(GeoPoint(location.latitude, location.longitude))
            }
        }
    }

    private fun goToSpecificLocation(lat: Double, lon: Double) {
        val startPoint = GeoPoint(lat, lon)
        mapView.controller.setCenter(startPoint)
        getPositionMarker().position = startPoint
    }

    private fun getPositionMarker(): Marker {
        if (marker == null) {
            marker = Marker(mapView)
            marker?.title = "Here I am"
            marker?.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)
            marker?.icon = ContextCompat.getDrawable(requireContext(), R.drawable.ic_bottom_arrow_white);
            mapView.controller.setZoom(17.5)

            mapView.overlays.add(marker)
        }
        return marker!!
    }

    override fun singleTapConfirmedHelper(p: GeoPoint?): Boolean {
        return false
    }

    override fun longPressHelper(p: GeoPoint?): Boolean {
        // Handle long press on the map
        if (p != null) {
            // p contains the new map center after a long press
            // Do something with the new location (latitude and longitude)
            val latitude = p.latitude
            val longitude = p.longitude

            // You can perform any action with the new location here
            // For example, show a marker, update UI, etc.
            // ...

            Log.e("TAG", "longPressHelper: $latitude $longitude")

            // Prevent further event propagation
            return true
        }

        return false
    }
}
